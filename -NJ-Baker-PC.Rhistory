shape = 21, size = 4, fill = "white",
aes(color = ifelse(Estimate >= 0, "#95ccba", "#f2cc84"))
) +
geom_errorbar(
width = 0, linewidth = 1,
aes(xmin = (`2.5 %`), xmax = (`97.5 %`), color = ifelse(Estimate >= 0, "#95ccba", "#f2cc84"))
) +
facet_wrap(~ fResponse, nrow = 5, scales = "free_x") +
theme_bw() +
theme(
panel.grid = element_blank(),
strip.background = element_blank(),
plot.margin = unit(c(0, 0.5, 0.5, 0), "cm"),
legend.position = "none",
text = element_text(size = 12),  # Adjust the size of all text elements
axis.title = element_blank(),    # Remove axis titles
axis.text = element_text(size = 12),  # Adjust the size of tick mark labels
strip.text = element_text(size = 12, face = "bold")  # Adjust the size and face of facet labels
) +
geom_vline(xintercept = 0, lty = 3) +
ylab("") +
xlab("")
p5
# create common x and y labels
x_axis_label <- "Estimate"
# Combine ggplot 1
(combined_1 <- cowplot::plot_grid(p1, p2, align = "hv", axis = "bt", ncol = 2))
# Add common label
combined_1 <- ggdraw() +
draw_plot(combined_1) +
draw_plot_label(label = x_axis_label, y = 0.03, x = 0.45, fontface = "plain", size = 12)
print(combined_1)
# save plots
tiff(filename = "Plots/LT_Overall_Driver_Ests_TaxoFuncIndices.tiff", width = 8, height = 12, units = 'in', res = 600, compression = 'lzw')
combined_1
dev.off()
# Combine ggplot 2
(combined_2 <- cowplot::plot_grid(p3, p4, align = "hv", axis = "bt", ncol = 2))
# Add common label
combined_2 <- ggdraw() +
draw_plot(combined_2) +
draw_plot_label(label = x_axis_label, y = 0.03, x = 0.45, fontface = "plain", size = 12)
print(combined_2)
# save plots
tiff(filename = "Plots/LT_Overall_Driver_Ests_TaxoGroups.tiff", width = 8, height = 12, units = 'in', res = 600, compression = 'lzw')
combined_2
dev.off()
# extra plot
tiff(filename = "Plots/LT_Overall_Driver_Ests_Extra.tiff", width = 4, height = 9, units = 'in', res = 600, compression = 'lzw')
p5
dev.off()
##### load functions, packages, and external sources #####
rm(list=ls())
library(lubridate)
library(pacman)
library(vegan)
library(INLA)
library(car) # for logit()
library(xtable) # for tables
library(RColorBrewer)
source("HighstatLibV10.R")
##### read in data & format #####
d1 <- read.csv("Data/LT_siteYr_AllData_wNAs_modified.csv", header=T)
allYrs <- d1[!is.na(d1$site_id_wMissing),]
# Remove the year 2019 from all non-within-site analyses
allYrs <- allYrs[allYrs$year != "2019",]
# tranform predictor variables (if necessary)
hist(allYrs$flow)
hist(allYrs$temp)
allYrs$flow <- log10(allYrs$flow)
# Change river type variables
allYrs$river_type[allYrs$river_type == 1] <- "type1"
allYrs$river_type[allYrs$river_type == 2] <- "type2"
allYrs$river_type[allYrs$river_type == 3] <- "type3"
allYrs$river_type[allYrs$river_type == 4] <- "type4"
allYrs$river_type[allYrs$river_type == 5] <- "type5"
# make factors
allYrs$fYear <- factor(allYrs$year_wMissing)
allYrs$fmodified <- as.factor(allYrs$Heavily_modified)
allYrs$ftype <- as.factor(allYrs$river_type)
allYrs$fEQC <- as.factor(allYrs$EQC)
# Scale the covariates
# function to add a new column onto the data with scaled vars (with s before their name)
scaleVars <- function(df){
newd <- lapply(df, function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
names(newd) <- sapply(names(newd),function(x)paste0("s",x))
cbind(df[,c(1, 2)], newd)
}
#apply function
sPredictors <- scaleVars(allYrs[, c(3:4, 58:72)])
sPredictors <- subset(sPredictors, select = -c(site_id, year, ssite_id, syear)) # remove ID variable
sPredictors$ID <- rownames(sPredictors)
allYrs$ID <- rownames(allYrs)
allYrs <- dplyr::left_join(allYrs, sPredictors, by = "ID")
allYrs <- subset(allYrs, select = -c(ID)) # remove ID variable
# Construct PCA to check the environmental variables and their relationships
pairs(allYrs[, c(77:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(79:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
View(allYrs)
pairs(allYrs[, c(79:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(84:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(85:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(79:84)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(80, 83, 86:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(85:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(79:84)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
allYrs_pca = princomp(na.omit(allYrs[, c(79:85)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(79:84)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
allYrs_pca = princomp(na.omit(allYrs[, c(79:84)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(79:84)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
allYrs_pca = princomp(na.omit(allYrs[, c(85:91)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(85:91)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
pairs(allYrs[, c(79:84)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
allYrs_pca = princomp(na.omit(allYrs[, c(79, 81:84)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(85:91)]), choices = c(1, 2)) #computes the environmental variable vectors
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(79, 81:84)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
allYrs_pca = princomp(na.omit(allYrs[, c(79, 81:84)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(79, 81:84)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$CA$eig))
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca))
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$loadings$eig))
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$sdev))
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$sdev$eig))
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$sdev))
allYrs_pca = princomp(na.omit(allYrs[, c(79:84)]), scores = TRUE) #computes PCA - gives us all the PCA results
allYrs_pca = princomp(na.omit(allYrs[, c(79:84)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(79:84)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$sdev))
allYrs_pca = princomp(na.omit(allYrs[, c(85:91)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(85:91)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$sdev))
#Broken-stick model#####
(ev <- allYrs_pca$sdev^2)
n <- length (ev)
bsm <- data.frame(j=seq(1:n), p=0)
bsm$p[1] <- 1/n
for (i in 2:n) {
bsm$p[i] = bsm$p[i-1] + (1/(n+1-i))
}
bsm$p <- 100*bsm$p/n
bsm
barplot(t(cbind(100*ev/sum(ev),bsm$p[n:1])), beside=TRUE, main="Broken stick model", col=c("blue",2), las=2)
legend("topright", c("% eigenvalue", "Broken stick model"), pch=15, col=c("blue",2), bty="n")
allYrs_pca = princomp(na.omit(allYrs[, c(79, 81:84)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(79, 81:84)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
pc1_scores <- as.data.frame(allYrs_pca$scores[, 1]*-1) # reverse signs to help with interpretation later
pc2_scores <- as.data.frame(allYrs_pca$scores[, 2]) # reverse signs to help with interpretation later
#Broken-stick model#####
(ev <- allYrs_pca$sdev^2)
n <- length (ev)
bsm <- data.frame(j=seq(1:n), p=0)
bsm$p[1] <- 1/n
for (i in 2:n) {
bsm$p[i] = bsm$p[i-1] + (1/(n+1-i))
}
bsm$p <- 100*bsm$p/n
bsm
barplot(t(cbind(100*ev/sum(ev),bsm$p[n:1])), beside=TRUE, main="Broken stick model", col=c("blue",2), las=2)
legend("topright", c("% eigenvalue", "Broken stick model"), pch=15, col=c("blue",2), bty="n")
##### load functions, packages, and external sources #####
rm(list=ls())
library(lubridate)
library(pacman)
library(vegan)
library(INLA)
library(car) # for logit()
library(xtable) # for tables
library(RColorBrewer)
source("HighstatLibV10.R")
##### read in data & format #####
d1 <- read.csv("Data/LT_siteYr_AllData_wNAs_modified.csv", header=T)
allYrs <- d1[!is.na(d1$site_id_wMissing),]
# Remove the year 2019 from all non-within-site analyses
allYrs <- allYrs[allYrs$year != "2019",]
# tranform predictor variables (if necessary)
hist(allYrs$flow)
hist(allYrs$temp)
allYrs$flow <- log10(allYrs$flow)
# Change river type variables
allYrs$river_type[allYrs$river_type == 1] <- "type1"
allYrs$river_type[allYrs$river_type == 2] <- "type2"
allYrs$river_type[allYrs$river_type == 3] <- "type3"
allYrs$river_type[allYrs$river_type == 4] <- "type4"
allYrs$river_type[allYrs$river_type == 5] <- "type5"
# make factors
allYrs$fYear <- factor(allYrs$year_wMissing)
allYrs$fmodified <- as.factor(allYrs$Heavily_modified)
allYrs$ftype <- as.factor(allYrs$river_type)
allYrs$fEQC <- as.factor(allYrs$EQC)
# Scale the covariates
# function to add a new column onto the data with scaled vars (with s before their name)
scaleVars <- function(df){
newd <- lapply(df, function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
names(newd) <- sapply(names(newd),function(x)paste0("s",x))
cbind(df[,c(1, 2)], newd)
}
#apply function
sPredictors <- scaleVars(allYrs[, c(3:4, 58:72)])
sPredictors <- subset(sPredictors, select = -c(site_id, year, ssite_id, syear)) # remove ID variable
sPredictors$ID <- rownames(sPredictors)
allYrs$ID <- rownames(allYrs)
allYrs <- dplyr::left_join(allYrs, sPredictors, by = "ID")
allYrs <- subset(allYrs, select = -c(ID)) # remove ID variable
# Construct PCA to check the environmental variables and their relationships
pairs(allYrs[, c(77:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(79:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(80, 83, 86:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
allYrs_pca = princomp(na.omit(allYrs[, c(79:91)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(79:91)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
# Construct PCA to check the environmental variables and their relationships
pairs(allYrs[, c(77:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(79:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(80, 83, 86:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(80, 83, 86:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(79:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(85:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(86:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
allYrs_pca = princomp(na.omit(allYrs[, c(86:91)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(79:91)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
# Construct PCA to check the environmental variables and their relationships
pairs(allYrs[, c(77:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(79:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(80, 83, 86:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(86:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
allYrs_pca = princomp(na.omit(allYrs[, c(86:91)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_code, col = RivTypCols) #adds text for samples
text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$ftype, col = "darkblue") #adds text for samples
#text(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$fmodified, col = "forestgreen") #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(86:91)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
# Check broken stick model
screeplot(allYrs_pca)
?screeplot
# Check broken stick model
screeplot(allYrs_pca, npcs = min(10, length(x$sdev)), type = "lines"))
# Check broken stick model
screeplot(allYrs_pca, npcs = length(x$sdev), type = "lines"))
# Check broken stick model
screeplot(allYrs_pca, npcs = min(10, length(allYrs_pca$sdev)), type = "lines"))
# Check broken stick model
screeplot(allYrs_pca, npcs = allYrs_pca$sdev, type = "lines"))
# Check broken stick model
screeplot(allYrs_pca, npcs = allYrs_pca$sdev, type = "lines")
# Check broken stick model
screeplot(allYrs_pca, npcs = min(10, length(allYrs_pca$sdev)), type = "lines")
# Check broken stick model
screeplot(allYrs_pca, npcs = min(10, length(allYrs_pca$sdev)), type = "barplot")
# Check broken stick model
screeplot(allYrs_pca, npcs = min(10, length(allYrs_pca$sdev)), type = c("barplot", "lines"))
# Check broken stick model
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$sdev))
points(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
# Construct PCA to check the environmental variables and their relationships
allYrs_pca = princomp(na.omit(allYrs[, c(86:91)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
points(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6) #adds text for samples
point(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6, pch = 3) #adds text for samples
points(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], allYrs$site_id, col = "red", cex = 0.6, pch = 3) #adds text for samples
?points
points(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], col = "red", cex = 0.6, pch = 3) #adds text for samples
# Check broken stick model
biplot(prin_comp)
# Check broken stick model
biplot(allYrs_pca)
corr <- cor(na.omit(allYrs[, c(86:91)]), (allYrs_pca$x*-1)) # correlation between original variables and principal components
allYrs_pca
allYrs_pca_scores <- (scores(allYrs_pca)[,1])
allYrs_pca_scores
corr <- cor(na.omit(allYrs[, c(86:91)]), scores(allYrs_pca)[,1]) # correlation between original variables and principal components
round(corr, 3)
corr1 <- cor(na.omit(allYrs[, c(86:91)]), scores(allYrs_pca)[,2]) # correlation between original variables and principal components
corr2 <- cor(na.omit(allYrs[, c(86:91)]), scores(allYrs_pca)[,2]) # correlation between original variables and principal components
round(corr2, 3)
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$sdev))
(ev <- allYrs_pca$sdev^2)
n <- length (ev)
bsm <- data.frame(j=seq(1:n), p=0)
bsm$p[1] <- 1/n
for (i in 2:n) {bsm$p[i] = bsm$p[i-1] + (1/(n+1-i))}
bsm$p <- 100*bsm$p/n
bsm
barplot(t(cbind(100*ev/sum(ev),bsm$p[n:1])), beside=TRUE, main="Broken stick model", col=c("blue",2), las=2)
legend("topright", c("% eigenvalue", "Broken stick model"), pch=15, col=c("blue",2), bty="n")
# isolate pc axis for use as covariate in model
pc1_scores <- as.data.frame(allYrs_pca$scores[, 1]) # reverse signs to help with interpretation later
pc1_scores
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
points(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], col = "red", cex = 0.6, pch = 3) #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(86:91)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
bsm
# isolate pc axis for use as covariate in model
pc1_scores <- as.data.frame(allYrs_pca$scores[, 1]) # reverse signs to help with interpretation later
colnames(pc1_scores) <- c("PC_axis1")
pc1_scores$ID <- rownames(pc1_scores)
allYrs$ID <- rownames(allYrs)
allYrs <- dplyr::left_join(allYrs, pc1_scores, by = "ID")
allYrs <- subset(allYrs, select = -c(ID)) # remove ID variable
View(allYrs)
pc1_scores <- as.data.frame(allYrs_pca$scores[, 1]) # reverse signs to help with interpretation later
colnames(pc1_scores) <- c("PC_axis1")
pc1_scores$ID <- rownames(pc1_scores)
allYrs$ID <- rownames(allYrs)
allYrs <- dplyr::left_join(allYrs, pc1_scores, by = "ID")
View(allYrs)
pc1_scores
##### load functions, packages, and external sources #####
rm(list=ls())
library(lubridate)
library(pacman)
library(vegan)
library(car) # for logit()
library(xtable) # for tables
library(RColorBrewer)
source("HighstatLibV10.R")
##### read in data & format #####
d1 <- read.csv("Data/LT_siteYr_AllData_wNAs_modified.csv", header=T)
allYrs <- d1[!is.na(d1$site_id_wMissing),]
# Remove the year 2019 from all non-within-site analyses
allYrs <- allYrs[allYrs$year != "2019",]
# tranform predictor variables (if necessary)
hist(allYrs$flow)
hist(allYrs$temp)
allYrs$flow <- log10(allYrs$flow)
# Change river type variables
allYrs$river_type[allYrs$river_type == 1] <- "type1"
allYrs$river_type[allYrs$river_type == 2] <- "type2"
allYrs$river_type[allYrs$river_type == 3] <- "type3"
allYrs$river_type[allYrs$river_type == 4] <- "type4"
allYrs$river_type[allYrs$river_type == 5] <- "type5"
# make factors
allYrs$fYear <- factor(allYrs$year_wMissing)
allYrs$fmodified <- as.factor(allYrs$Heavily_modified)
allYrs$ftype <- as.factor(allYrs$river_type)
allYrs$fEQC <- as.factor(allYrs$EQC)
# Scale the covariates
# function to add a new column onto the data with scaled vars (with s before their name)
scaleVars <- function(df){
newd <- lapply(df, function(x) if(is.numeric(x)){
scale(x, center=TRUE, scale=TRUE)
} else x)
names(newd) <- sapply(names(newd),function(x)paste0("s",x))
cbind(df[,c(1, 2)], newd)
}
#apply function
sPredictors <- scaleVars(allYrs[, c(3:4, 58:72)])
sPredictors <- subset(sPredictors, select = -c(site_id, year, ssite_id, syear)) # remove ID variable
sPredictors$ID <- rownames(sPredictors)
allYrs$ID <- rownames(allYrs)
allYrs <- dplyr::left_join(allYrs, sPredictors, by = "ID")
allYrs <- subset(allYrs, select = -c(ID)) # remove ID variable
View(allYrs)
# Check variable colinnearity
pairs(allYrs[, c(77:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(79:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(80, 83, 86:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
pairs(allYrs[, c(86:91)], lower.panel = panel.smooth, upper.panel = panel.cor, diag.panel = panel.hist, main = "Pearson Correlation Matrix") # Check env data for collinearity
# Construct PCA to check the environmental variables and their relationships
allYrs_pca = princomp(na.omit(allYrs[, c(86:91)]), scores = TRUE) #computes PCA - gives us all the PCA results
summary(allYrs_pca)
allYrs_pca
plot(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], type = "n", xlab = "Axis.1", ylab = "Axis.2", las = 1) #empty PCA Plot
abline(v = 0, lty = 3) #plots origin line verticle
abline(h = 0, lty = 3) #plots origin line horizontal
points(allYrs_pca$scores[, 1], allYrs_pca$scores[, 2], col = "red", cex = 0.6, pch = 3) #adds text for samples
vec = envfit(allYrs_pca, na.omit(allYrs[, c(86:91)]), choices = c(1, 2)) #computes the environmental variable vectors
plot(vec, col = "blue", cex = 1) #plots vectors (environmetal variables)
# Check broken stick model
allYrs_pca_scores <- (scores(allYrs_pca)[,1])
corr1 <- cor(na.omit(allYrs[, c(86:91)]), scores(allYrs_pca)[,1]) # correlation between original variables and principal components
round(corr1, 3)
corr2 <- cor(na.omit(allYrs[, c(86:91)]), scores(allYrs_pca)[,2]) # correlation between original variables and principal components
round(corr2, 3)
screeplot(allYrs_pca, bstick = TRUE, npcs = length(allYrs_pca$sdev))
(ev <- allYrs_pca$sdev^2)
n <- length (ev)
bsm <- data.frame(j=seq(1:n), p=0)
bsm$p[1] <- 1/n
for (i in 2:n) {bsm$p[i] = bsm$p[i-1] + (1/(n+1-i))}
bsm$p <- 100*bsm$p/n
barplot(t(cbind(100*ev/sum(ev),bsm$p[n:1])), beside=TRUE, main="Broken stick model", col=c("blue",2), las=2)
legend("topright", c("% eigenvalue", "Broken stick model"), pch=15, col=c("blue",2), bty="n")
# isolate pc axis for use as covariate in model
pc1_scores <- as.data.frame(allYrs_pca$scores[, 1]) # reverse signs to help with interpretation later
colnames(pc1_scores) <- c("PC_axis1")
pc1_scores$ID <- rownames(pc1_scores)
allYrs$ID <- rownames(allYrs)
allYrs <- dplyr::left_join(allYrs, pc1_scores, by = "ID")
allYrs <- subset(allYrs, select = -c(ID)) # remove ID variable
response_lmer <- unique(allYrs[,c("site_code", "site_id", "year",
"abundance",
"spp_richness", "shannonsH", "E10", "turnover", "spp_rich_rare",
"ept_spp_richness", "diptera_spp_richness", "insect_spp_richness", "mollusc_spp_richness", "annelid_spp_richness", "crustacea_spp_richness",
"ept_abundance", "diptera_abundance", "insect_abundance", "mollusc_abundance", "annelid_abundance", "crustacea_abundance",
"FRic", "FEve", "FDis", "FRed", "F_turnover",
"FRic.SES", "FEve.SES", "FDis.SES",
"sflow", "stemp", "PC_axis1", "PC_axis2",
"fmodified", "ftype", "fEQC")])
# isolate pc axis for use as covariate in model
pc1_scores <- as.data.frame(allYrs_pca$scores[, 1]) # reverse signs to help with interpretation later
colnames(pc1_scores) <- c("PC_axis1")
pc1_scores$ID <- rownames(pc1_scores)
allYrs$ID <- rownames(allYrs)
allYrs <- dplyr::left_join(allYrs, pc1_scores, by = "ID")
allYrs <- subset(allYrs, select = -c(ID)) # remove ID variable
View(allYrs)
